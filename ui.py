# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\o_0\Documents\NetSimulator\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import Calculate
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(40, 50, 720, 540))
        self.tableView.setObjectName("tableView")

        self.btnStart = QtWidgets.QPushButton(self.centralwidget)
        self.btnStart.setGeometry(QtCore.QRect(660, 10, 100, 30))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(14)
        self.btnStart.setFont(font)
        self.btnStart.setObjectName("btnStart")

        self.btnStart.clicked.connect(self.start)

        self.lblInfo = QtWidgets.QLabel(self.centralwidget)
        self.lblInfo.setGeometry(QtCore.QRect(450, 0, 200, 50))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        self.lblInfo.setFont(font)
        self.lblInfo.setText("")
        self.lblInfo.setAlignment(QtCore.Qt.AlignCenter)
        self.lblInfo.setObjectName("lblInfo")

        self.cboChoose = QtWidgets.QComboBox(self.centralwidget)
        self.cboChoose.setGeometry(QtCore.QRect(40, 10, 200, 30))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        self.cboChoose.setFont(font)
        self.cboChoose.setObjectName("cboChoose")

        choices = ['S=1, Q=0', 'S=1, Q=1', 'S=5, Q=0', 'S=5, Q=5', 'S=10, Q=0', 'S=10, Q=10']
        self.cboChoose.addItems(choices)
        # self.cboChoose.currentIndexChanged.connect(self.start)

        self.rbtnMode = QtWidgets.QRadioButton(self.centralwidget)
        self.rbtnMode.setGeometry(QtCore.QRect(250, 10, 200, 30))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        self.rbtnMode.setFont(font)
        self.rbtnMode.setObjectName("rbtnMode")

        MainWindow.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btnStart.setText(_translate("MainWindow", "Start"))
        self.rbtnMode.setText(_translate("MainWindow", "Show Event Table"))

    def start(self, MainWindow):
        if not self.rbtnMode.isChecked():
            self.lblInfo.setText('BP Table')
            df = Calculate.output(self.cboChoose.currentIndex(), 'BPTable', True, False, False)
        else:
            self.lblInfo.setText('Event Table')
            df = Calculate.output(self.cboChoose.currentIndex(), 'EventTable', True, False, False)
        model = PandasModel(df)
        self.tableView.setModel(model)
        self.tableView.show()


class PandasModel(QtGui.QStandardItemModel):
    def __init__(self, data, parent=None):
        QtGui.QStandardItemModel.__init__(self, parent)
        self._data = data
        for row in data.values.tolist():
            data_row = [ QtGui.QStandardItem("{0:.6f}".format(x)) for x in row ]
            self.appendRow(data_row)
        return

    def rowCount(self, parent=None):
        return len(self._data.values)

    def columnCount(self, parent=None):
        return self._data.columns.size

    def headerData(self, x, orientation, role):
        if orientation == QtCore.Qt.Horizontal and role == QtCore.Qt.DisplayRole:
            return self._data.columns[x]
        if orientation == QtCore.Qt.Vertical and role == QtCore.Qt.DisplayRole:
            return self._data.index[x]
        return None